
package passwordgenerator;

import java.util.stream.IntStream;
import java.awt.datatransfer.Clipboard;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;


/**
 *
 * @author Islam
 */
public class PGP extends javax.swing.JFrame {
    
    private int[] nums=IntStream.rangeClosed(48, 57).toArray();
    private int[] lowerCases=IntStream.rangeClosed(97, 122).toArray();
    private int[] upperCases=IntStream.rangeClosed(65, 90).toArray();
    private boolean numBool=false,upperCaseBool=false,lowerCaseBool=true;
    private String generatedPassword="";
    private charGenerator randNum=new charGenerator();
    private int passwordLength=8;
    public PGP() {
        initComponents();
        setLocationRelativeTo(null);
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("resources/icon.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mPanel = new javax.swing.JPanel();
        genBtn = new javax.swing.JButton();
        txt = new javax.swing.JTextField();
        numCB = new javax.swing.JComboBox<>();
        letterCB = new javax.swing.JComboBox<>();
        clipBoardCopy = new javax.swing.JButton();
        passwordLengthCB = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Password Generator");
        setName("MFrame"); // NOI18N
        setResizable(false);

        mPanel.setBackground(new java.awt.Color(51, 51, 51));
        mPanel.setForeground(new java.awt.Color(51, 51, 51));

        genBtn.setText("Generate");
        genBtn.setBorder(null);
        genBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genBtnActionPerformed(evt);
            }
        });

        txt.setEditable(false);
        txt.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        txt.setMargin(new java.awt.Insets(2, 10, 2, 10));
        txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtActionPerformed(evt);
            }
        });

        numCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "no numbers", "with numbers" }));
        numCB.setBorder(null);
        numCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numCBActionPerformed(evt);
            }
        });

        letterCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "lower case only", "no letters", "upper case only", "mixed" }));
        letterCB.setBorder(null);
        letterCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                letterCBActionPerformed(evt);
            }
        });

        clipBoardCopy.setBackground(new java.awt.Color(51, 51, 51));
        clipBoardCopy.setForeground(java.awt.Color.darkGray);
        clipBoardCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/passwordgenerator/resources/clipBoardCopy.png"))); // NOI18N
        clipBoardCopy.setBorder(null);
        clipBoardCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clipBoardCopyActionPerformed(evt);
            }
        });

        passwordLengthCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "16", "32" }));
        passwordLengthCB.setBorder(null);
        passwordLengthCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordLengthCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mPanelLayout = new javax.swing.GroupLayout(mPanel);
        mPanel.setLayout(mPanelLayout);
        mPanelLayout.setHorizontalGroup(
            mPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mPanelLayout.createSequentialGroup()
                .addGroup(mPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mPanelLayout.createSequentialGroup()
                                .addComponent(numCB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(letterCB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(passwordLengthCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clipBoardCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mPanelLayout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(genBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mPanelLayout.setVerticalGroup(
            mPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(mPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numCB, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(letterCB)
                    .addComponent(passwordLengthCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clipBoardCopy, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                    .addComponent(txt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(genBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void numCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numCBActionPerformed
        switch(numCB.getSelectedIndex()){
            case 0:
                numBool=false;
                break;
            case 1:
                numBool=true;
                break;
        }
    }//GEN-LAST:event_numCBActionPerformed

    private void letterCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_letterCBActionPerformed
         switch(letterCB.getSelectedIndex()){
            case 0:
                upperCaseBool=false;
                lowerCaseBool=true;
                break;
            case 1:
                upperCaseBool=false;
                lowerCaseBool=false;
                break;
            case 2:
                upperCaseBool=true;
                lowerCaseBool=false;
                break;
            case 3:
                upperCaseBool=true;
                lowerCaseBool=true;
                break;    
         }
    }//GEN-LAST:event_letterCBActionPerformed

    private void genBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genBtnActionPerformed
        
        randNum.Clear();
        if(numBool)randNum.addRange(nums);
        if(lowerCaseBool)randNum.addRange(lowerCases);
        if(upperCaseBool)randNum.addRange(upperCases);
        
        do{
            generatedPassword="";
            for(int i=0;i<passwordLength;i++)
            generatedPassword+=String.valueOf((char)randNum.getRandom());
            
        }while(checkPassword(generatedPassword));
        
        txt.setText(generatedPassword);
    }//GEN-LAST:event_genBtnActionPerformed

    
    private void txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtActionPerformed
        
    }//GEN-LAST:event_txtActionPerformed

    private void clipBoardCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clipBoardCopyActionPerformed
        StringSelection stringSelection = new StringSelection (txt.getText());
        Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
        clpbrd.setContents (stringSelection, null);
    }//GEN-LAST:event_clipBoardCopyActionPerformed

    private void passwordLengthCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordLengthCBActionPerformed
        switch(passwordLengthCB.getSelectedIndex()){
                case 0:
                    passwordLength=8;
                    break;
                case 1:
                    passwordLength=16;
                    break;
                case 2:
                    passwordLength=32;
                    break;
        }
    }//GEN-LAST:event_passwordLengthCBActionPerformed

    
     private boolean checkPassword(String str) {
         boolean nFlag=false,uFlag=false,lFlag=false;
         char ch;
         if(numBool)
             for(int i=0;i < str.length();i++) {
        ch = str.charAt(i);
        if( Character.isDigit(ch)||numBool) {
            nFlag = true;
        }
        else if (Character.isUpperCase(ch)||upperCaseBool) {
            uFlag = true;
        } else if (Character.isLowerCase(ch)||lowerCaseBool) {
            lFlag = true;
        }}
        return(nFlag&&lFlag&&uFlag);
    }
    
    
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clipBoardCopy;
    private javax.swing.JButton genBtn;
    private javax.swing.JComboBox<String> letterCB;
    private javax.swing.JPanel mPanel;
    private javax.swing.JComboBox<String> numCB;
    private javax.swing.JComboBox<String> passwordLengthCB;
    private javax.swing.JTextField txt;
    // End of variables declaration//GEN-END:variables

   
}
